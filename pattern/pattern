확인하기 쉽게 패턴마다 배열 + 코드 로 정리하였습니다. 

byte diagonal_left_rows[8][8] = {
  {B10000000, B01000000, B00100000, B00010000, B00001000, B00000100, B00000010, B00000001},
  {B01000000, B00100000, B00010000, B00001000, B00000100, B00000010, B00000001, B10000000},
  {B00100000, B00010000, B00001000, B00000100, B00000010, B00000001, B10000000, B01000000},
  {B00010000, B00001000, B00000100, B00000010, B00000001, B10000000, B01000000, B00100000},
  {B00001000, B00000100, B00000010, B00000001, B10000000, B01000000, B00100000, B00010000},
  {B00000100, B00000010, B00000001, B10000000, B01000000, B00100000, B00010000, B00001000},
  {B00000010, B00000001, B10000000, B01000000, B00100000, B00010000, B00001000, B00000100},
  {B00000001, B10000000, B01000000, B00100000, B00010000, B00001000, B00000100, B00000010}
};

//대각선시작 웨이브1 오른쪽 아래에서 왼쪽 위
  for(int c= 0 ; c<5 ; c++){
    for (int layer = 0; layer < 8; layer++) {
      digitalWrite(latchPin, LOW);
        for (int i = 0; i < 8; i++) {
          shiftOut(dataPin, clockPin, MSBFIRST, diagonal_left_rows[layer][i]);
        }
        digitalWrite(latchPin, HIGH);
        delay(200);  
    }
  }

byte diagonal_light_rows[8][8] = {
  {B00000001, B10000000, B01000000, B00100000, B00010000, B00001000, B00000100, B00000010},//1
  {B00000010, B00000001, B10000000, B01000000, B00100000, B00010000, B00001000, B00000100},//2
  {B00000100, B00000010, B00000001, B10000000, B01000000, B00100000, B00010000, B00001000},//3
  {B00001000, B00000100, B00000010, B00000001, B10000000, B01000000, B00100000, B00010000},//4
  {B00010000, B00001000, B00000100, B00000010, B00000001, B10000000, B01000000, B00100000},//5
  {B00100000, B00010000, B00001000, B00000100, B00000010, B00000001, B10000000, B01000000},//6
  {B01000000, B00100000, B00010000, B00001000, B00000100, B00000010, B00000001, B10000000},//7
  {B10000000, B01000000, B00100000, B00010000, B00001000, B00000100, B00000010, B00000001},//8
};

//대각선시작 웨이브2 왼쪽 위에서 오른쪽 아래
for(int c= 0 ; c<5 ; c++){
    for (int layer = 0; layer < 8; layer++) {
      digitalWrite(latchPin, LOW);
        for (int i = 0; i < 8; i++) {
          shiftOut(dataPin, clockPin, MSBFIRST, diagonal_light_rows[layer][i]);
        }
        digitalWrite(latchPin, HIGH);
        delay(200);  
    }
  }




byte diagonal_alpahbet_rows[14][8] = { //victory
{B00011111,B00111110,B01100000,B11000000,B11000000,B01100000,B00111110,B00011111},
{B11100000,B11000001,B10011111,B00111111,B00111111,B10011111,B11000001,B11100000},
{B00000000,B00000000,B00000000,B11111011,B11111011,B00000000,B00000000,B00000000},
{B11111111,B11111111,B11111111,B00000010,B00000010,B11111111,B11111111,B11111111},
{B00011000,B01100110,B01000010,B11000011,B11000011,B01100110,B00100100,B00000000},
{B11100111,B10011001,B10111101,B00111100,B00111100,B10011001,B11011001,B11111111},
{B00000000,B00000011,B00000011,B11111111,B11111111,B00000011,B00000011,B00000000},
{B11111111,B11111100,B11111100,B00000000,B00000000,B11111100,B11111100,B11111111},
{B00011000,B00111100,B01100110,B11000011,B11000011,B01100110,B00111100,B00011000},
{B11100111,B11000011,B10011001,B00111100,B00111100,B10011001,B11000011,B11100111},
{B00000000,B11111111,B11111111,B00110001,B00110001,B00011110,B11111000,B11100000},
{B11111111,B00000000,B00000000,B11001110,B11001110,B11100001,B00000111,B00011111},
{B00000001,B00000011,B00001110,B11111100,B11111100,B00001110,B00000011,B00000001},
{B11111110,B11111100,B11110001,B00000011,B00000011,B11110001,B11111100,B11111110}
};

byte diagonal_hear_rows[8][8] = { //heart
{B00001110,B00111111,B01111111,B11111100,B11111100,B01111111,B00111111,B00001110},
{B00001110,B00111111,B01111111,B11111100,B11111100,B01111111,B00111111,B00001110},
{B11110001,B11000000,B10000000,B00000011,B00000011,B10000000,B11000000,B11110001},
{B11110001,B11000000,B10000000,B00000011,B00000011,B10000000,B11000000,B11110001},
{B00001110,B00111111,B01111111,B11111100,B11111100,B01111111,B00111111,B00001110},
{B00001110,B00111111,B01111111,B11111100,B11111100,B01111111,B00111111,B00001110},
{B11110001,B11000000,B10000000,B00000011,B00000011,B10000000,B11000000,B11110001},
{B11110001,B11000000,B10000000,B00000011,B00000011,B10000000,B11000000,B11110001}
};

//하트 모양 추천
  for(int c= 0 ; c<5 ; c++){
    for (int layer = 0; layer < 8; layer++) {
      digitalWrite(latchPin, LOW);
        for (int i = 0; i < 8; i++) {
          shiftOut(dataPin, clockPin, MSBFIRST, diagonal_hear_rows[layer][i]);
        }
        digitalWrite(latchPin, HIGH);
        delay(300);  
    }
  }




byte battery_rows[8][8] = {
  {B11111111, B10000001, B10000001, B10000001, B10000001, B10000001, B10000001, B11111111},
  {B11111111, B10000001, B10000001, B10000001, B10000001, B10000001, B10000001, B11111111},
  {B11111111, B11111111, B10000001, B10000001, B10000001, B10000001, B11111111, B11111111},
  {B11111111, B11111111, B11111111, B10000001, B10000001, B11111111, B11111111, B11111111},
  {B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111},
  {B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111},
  {B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111},
  {B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111}
};

byte battery_rows2[8][8] = {
  {B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111},
 {B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111},
  {B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111},
  {B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111},
  {B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111},
  {B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111},
  {B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111},
  {B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111}
};


// // 배터리 충전-보통
//   for(int c= 0 ; c<5 ; c++){
//     for (int layer = 0; layer < 12; layer++) {
//       digitalWrite(latchPin, LOW);
//         for (int i = 0; i < 8; i++) {
//           shiftOut(dataPin, clockPin, MSBFIRST, battery_rows[layer][i]);
//         }
//         digitalWrite(latchPin, HIGH);
//         delay(300);  
//     }
//   }


// 물 떨어졌을때 파장 - 사용안함
byte droppatterns[8][8] = {
  {B00000000,B00000000,B00000000,B00011000,B00011000,B00000000,B00000000,B00000000},
  {B00000000,B00000000,B00111100,B00111100,B00111100,B00111100,B00000000,B00000000},
  {B00000000,B01111110,B01000010,B01011010,B01011010,B01000010,B01111110,B00000000},
  {B11111111,B11111111,B11000011,B11000011,B11000011,B11000011,B11111111,B11111111},
  {B11111111,B10000001,B10000001,B10011001,B10011001,B10000001,B10000001,B11111111},
  {B00000000,B01111110,B01000010,B01011010,B01011010,B01000010,B01111110,B00000000},
  {B00000000,B00000000,B00111100,B00111100,B00111100,B00111100,B00000000,B00000000},
  {B00000000,B01111110,B01000010,B01011010,B01011010,B01000010,B01111110,B00000000},

};

// 픽맨 
byte pickman[8][8] = {
{B00011000,B01111110,B11111111,B11111111,B11111111,B11100111,B11000011,B01000010},
{B00011000,B01111110,B11111111,B11111111,B11111111,B11100111,B11000011,B01000010},
{B00011000,B01111110,B11111111,B11111111,B11111111,B11111111,B11111111,B01111110},
{B00011000,B01111110,B11111111,B11111111,B11111111,B11111111,B11111111,B01111110},
{B00011000,B01111110,B11111111,B11111111,B11111111,B11100111,B11000011,B01000010},
{B00011000,B01111110,B11111111,B11111111,B11111111,B11100111,B11000011,B01000010},
{B00011000,B01111110,B11111111,B11111111,B11111111,B11111111,B11111111,B01111110},
{B00011000,B01111110,B11111111,B11111111,B11111111,B11111111,B11111111,B01111110}

};

//픽맨 퀘스트
for(int c= 0 ; c<5 ; c++){
    for (int layer = 0; layer < 8; layer++) {
      digitalWrite(latchPin, LOW);
        for (int i = 0; i < 8; i++) {
          shiftOut(dataPin, clockPin, MSBFIRST, pickman[layer][i]);
        }
        digitalWrite(latchPin, HIGH);
        delay(200);  
    }
  }

  

byte arrow[8][8] = {
{B00010000,B00110000,B01110000,B11111110,B11111110,B01110000,B00110000,B00010000},
{B00010000,B00110000,B01110000,B11111110,B11111110,B01110000,B00110000,B00010000},
{B00000000,B00011000,B00111100,B01111110,B11111111,B00011000,B00011000,B00011000},
{B00000000,B00011000,B00111100,B01111110,B11111111,B00011000,B00011000,B00011000},
{B00000000,B00011000,B00011100,B11111111,B11111111,B00011100,B00011000,B00010000},
{B00000000,B00011000,B00011100,B11111111,B11111111,B00011100,B00011000,B00010000},
{B00000000,B00011000,B00011000,B11111111,B01111110,B00111100,B00011000,B00011000},
{B00000000,B00011000,B00011000,B11111111,B01111110,B00111100,B00011000,B00011000}
};


//화살표 퀘스트 생각보다 티가 안난다
for(int c= 0 ; c<5 ; c++){
    for (int layer = 0; layer < 8; layer++) {
      digitalWrite(latchPin, LOW);
        for (int i = 0; i < 8; i++) {
          shiftOut(dataPin, clockPin, MSBFIRST, arrow[layer][i]);
        }
        digitalWrite(latchPin, HIGH);
        delay(200);  
    }
  }

  
// 물음표 느낌표 --> 사용안
byte question[3][8] = {
{B00000000,B11110000,B11110000,B10011011,B10011011,B11110000,B11110000,B00000000},
{B00000000,B11000000,B10000000,B10001011,B10001011,B10010000,B11110000,B00000000},
{B00000000,B00000000,B00000000,B11111011,B11111011,B00000000,B00000000,B00000000}
};

// /
// for(int c= 0 ; c<5 ; c++){
//     for (int layer = 0; layer < 3; layer++) {
//       digitalWrite(latchPin, LOW);
//         for (int i = 0; i < 8; i++) {
//           shiftOut(dataPin, clockPin, MSBFIRST, question[layer][i]);
//         }
//         digitalWrite(latchPin, HIGH);
//         delay(200);  
//     }
//   }


// 숫자 카운트
byte count[12][8] = {
  {B01000000,B11010011,B10010001,B10010001,B11010011,B11111111,B01101110,B00000000},
{B01000000,B11010011,B10010001,B10010001,B11010011,B11111111,B01101110,B00000000},
{B10111001,B00101100,B01101110,B01101110,B00101100,B00000000,B10010001,B11111111},
{B10111001,B00101100,B01101110,B01101110,B00101100,B00000000,B10010001,B11111111},
{B00000000,B11000110,B11100011,B10100011,B10110011,B10011110,B10001100,B10000000},
{B00000000,B11000110,B11100011,B10100011,B10110011,B10011110,B10001100,B10000000},
{B01111011,B00111001,B00011100,B01011100,B01001100,B01100001,B01110011,B01111111},
{B01111011,B00111001,B00011100,B01011100,B01001100,B01100001,B01110011,B01111111},
{B00000000,B10000100,B10000110,B11111111,B11111111,B10000000,B10000000,B00000000},
{B00000000,B10000100,B10000110,B11111111,B11111111,B10000000,B10000000,B00000000},
{B11111111,B01111011,B01111001,B00000000,B00000000,B01111111,B01111111,B11111111},
{B11111111,B01111011,B01111001,B00000000,B00000000,B01111111,B01111111,B11111111},
};

byte count2[10][8] = {
 {B01000000,B11010011,B10010001,B10010001,B11010011,B11111111,B01101110,B00000000},
{B01000000,B11010011,B10010001,B10010001,B11010011,B11111111,B01101110,B00000000},
{B00000000,B11000110,B11100011,B10100011,B10110011,B10011110,B10001100,B10000000},
{B00000000,B11000110,B11100011,B10100011,B10110011,B10011110,B10001100,B10000000},
{B00000000,B10000100,B10000110,B11111111,B11111111,B10000000,B10000000,B00000000},
{B00000000,B10000100,B10000110,B11111111,B11111111,B10000000,B10000000,B00000000},
{B00000000,B01111110,B01100011,B11000001,B11000001,B01100011,B01111110,B00011100},
{B00000000,B01111110,B01100011,B11000001,B11000001,B01100011,B01111110,B00011100},
{B00000000,B00101100,B00100110,B00100011,B11100011,B11111111,B00100000,B00100000},
{B00000000,B00101100,B00100110,B00100011,B11100011,B11111111,B00100000,B00100000}

};


// 숫자 0 1 2 3 4
    for (int layer = 0; layer <10 ; layer++) {
      digitalWrite(latchPin, LOW);
        for (int i = 0; i < 8; i++) {
          shiftOut(dataPin, clockPin, MSBFIRST, count2[layer][i]);
        }
        digitalWrite(latchPin, HIGH);
        delay(300);  
    }
